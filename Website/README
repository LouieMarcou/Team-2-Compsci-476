For this project we have built a website to simulate the functions of what the client (Cornerside Help) would like to ultimately accomplish. In essence, provide a system where people can, using only a number or some other simple identifier, donate to a homeless person. The client identifies the issue of if you simply hand someone money they could use it for things other than survival needs. To combat this need, the client would like to implement a system that people can donate to and a homeless person can access where they can use donated funds in exchange for food or services (i.e. shelter). The client had no formal business plan in place so the webiste we built is a simulation of the desired system. The goal of this is to provide a framework for the project to begin building on.

Clarity note:
From this point on "users" will be in reference the homeless people who would use this system to receive donations. "Donors" will reference those who donate to users.

Passwords:
Passwords are stored on the db and we use hashing to keep them safe. The hash key is stored on config.conf

The database:
The pages on this project work off of 4 tables users, donors, reciepts, and shelters. They have the follwing characteristics

users:
1	userID Primary	int(11)		AUTO_INCREMENT
2	firstName	varchar(255)	utf8mb4_general_ci
3	lastName	varchar(255)	utf8mb4_general_ci
4	accountBalance	float
5	city	varchar(30)	utf8mb4_general_ci
6	shelterID	int(11)	
7	pHash	varchar(255)	utf8mb4_general_ci	
8	username	varchar(255)	utf8mb4_general_ci

Donors:
1	donorID Primary	int(11)	AUTO_INCREMENT	
2   username	varchar(255)	utf8mb4_general_ci	
3	firstName	varchar(20)	utf8mb4_general_ci
4	lastName	varchar(30)	utf8mb4_general_ci	
5	city	varchar(30)	utf8mb4_general_ci
6	pHash	varchar(255)	utf8mb4_general_ci

Receipts:
1	receiptID Primary	int(11)	AUTO_INCREMENT
2	userID	int(11)
3	donorID	int(11)
4	amount	int(11)

Shelters:
1	shelterID Primary	int(11)	AUTO_INCREMENT
2	shelterName	varchar(255)	utf8mb4_general_ci
3	address	varchar(255)	utf8mb4_general_ci
4	city	varchar(255)	utf8mb4_general_ci
5	state	varchar(255)	utf8mb4_general_ci
6	zipcode	int(11)

The website is straight forward as far as funtionality, there are several pages each of which I'll describe:

Home / index.html:
This is where a user or donor will find themselves when they enter the website. On this page is general background information about Cornerside Help. The client expressed interest in a "map" feature to show the locations of shelters or businesses where users can access their funds or business that are participating with Cornersidehelp. This simply collects geographic metadata and displays a map, since Cornerside Help does not have any businesses presently participating it is just there to represent where it "should" be. There is a "How to Help" button that links to the about page.

Sponsors / Sponsors.html:
This page is to simulate when the company does take off if Cornerside help acquires sponsors where their information can be found.

Donate / Donate.html:
This page is for a donor to use. They enter in the ID of a user they want to donate to. Enter the amount. There is a guest checkbox that allows a donor to checkout anonomously. This is where the API of the donation soltution API would take them to a place to enter their information, but since one isn't possible presently it simply allows a donor to not enter in any more information. Otherwise, the donor must enter in their credentials. The page uses Javascript event listener for when the donor selects the "Verify" button, this generates a pop up allowing the donor to double check their information and donation is correct. It then generates a submit button. This page posts to processDonation.php.

processDonation.php:
This donation information is processed here. First, the donors credentials are checked, then the program makes sure the userID entered exists. If everythign check out the users account balance is updated, and a receipt is generated with the information from the donation.

Log In / LogIn.html:
This page has two login boxes one for users, titled "members" and the other for donors. This posts to database.php, upon credential check the database.php displays the information of whoever logged in.

Create Account / CreateUser.html:
This page takes information from either a user or donor to create an account on the database. It uses Javascript event listener for when either the user or donor radio buttons is selected. If user is selected it generates a dropdown menu with a list of the shelters on the "network" or provides an "other" option if none apply. This page also posts to database.php

database.php:
This page does most of the heavy lifting both handling account creation and account log ons. Most of its functionality is described on the pages above. In essence, it handles the back end processes of account creation and log on.

About / About.html:
This page has a graphic provided by the client on the "5 steps" of helping.


There was some attempts to use an API, namely Stripe API. Unfortunatly without a business model or a real business they would not let us use or store informatio with them. In spite of this we did discover some information about how to use it, regardless of us not actually implementing it. The Stripe API uses the Stripe CLI to communicate with the server. create_price.php shows how this process work, effectively the API builds a json object to store information about purchases. The composor.json, composer.lock and everything in the vendor folder all come from the attempted implementation, but ultimately do nothing for the present state of the website.